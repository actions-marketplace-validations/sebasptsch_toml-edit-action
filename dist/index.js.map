{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import core from \"@actions/core\"\nimport github from \"@actions/github\"\nimport toml, { TomlPrimitive } from 'smol-toml'\nimport { promises as fs } from \"node:fs\"\n\ntry {\n    const path = core.getInput(\"path\", {\n        required: true,\n        trimWhitespace: true,\n    })\n\n    // Read the file \n    const file = await fs\n        .readFile(path, \"utf-8\")\n        .catch((error) => {\n            throw new Error(`Failed to read the file: ${error.message}`)\n        })\n\n    const key = core.getInput(\"key\", {\n        required: true,\n        trimWhitespace: true,\n    })\n\n    const value = core.getInput(\"value\", {\n        required: true,\n        trimWhitespace: true,\n    })\n\n    const parsedToml = toml.parse(file)\n\n    // If the key is a string, we can just set it directly\n    // split the key by '.' and iterate through the keys to set the value\n    \n        let keys = key.split('.')\n        let currentObject = parsedToml as Record<string, toml.TomlPrimitive>\n        for (let i = 0; i < keys.length - 1; i++) {\n            if (currentObject[keys[i]] === undefined) {\n                currentObject[keys[i]] = {}\n            }\n            currentObject = currentObject[keys[i]] as Record<string, toml.TomlPrimitive>\n        }\n        currentObject[keys[keys.length - 1]] = value\n        core.setOutput(\"result\", toml.stringify(parsedToml))\n    \n    // Write the file\n    await fs\n        .writeFile(path, toml.stringify(parsedToml))\n        .catch((error) => {\n            throw new Error(`Failed to write the file: ${error.message}`)\n        })\n\n    // Set the output\n    core.setOutput(\"result\", toml.stringify(parsedToml))\n    \n} catch (error) {\n    if (error instanceof Error) {\n        core.setFailed(error.message)\n    } else {\n        core.setFailed(\"Unknown error\")\n    }\n}"],"mappings":"AAAA,OAAOA,MAAU,gBAEjB,OAAOC,MAA6B,YACpC,OAAS,YAAYC,MAAU,UAE/B,GAAI,CACA,IAAMC,EAAOH,EAAK,SAAS,OAAQ,CAC/B,SAAU,GACV,eAAgB,EACpB,CAAC,EAGKI,EAAO,MAAMF,EACd,SAASC,EAAM,OAAO,EACtB,MAAOE,GAAU,CACd,MAAM,IAAI,MAAM,4BAA4BA,EAAM,OAAO,EAAE,CAC/D,CAAC,EAECC,EAAMN,EAAK,SAAS,MAAO,CAC7B,SAAU,GACV,eAAgB,EACpB,CAAC,EAEKO,EAAQP,EAAK,SAAS,QAAS,CACjC,SAAU,GACV,eAAgB,EACpB,CAAC,EAEKQ,EAAaP,EAAK,MAAMG,CAAI,EAK1BK,EAAOH,EAAI,MAAM,GAAG,EACpBI,EAAgBF,EACpB,QAASG,EAAI,EAAGA,EAAIF,EAAK,OAAS,EAAGE,IAC7BD,EAAcD,EAAKE,CAAC,CAAC,IAAM,SAC3BD,EAAcD,EAAKE,CAAC,CAAC,EAAI,CAAC,GAE9BD,EAAgBA,EAAcD,EAAKE,CAAC,CAAC,EAEzCD,EAAcD,EAAKA,EAAK,OAAS,CAAC,CAAC,EAAIF,EACvCP,EAAK,UAAU,SAAUC,EAAK,UAAUO,CAAU,CAAC,EAGvD,MAAMN,EACD,UAAUC,EAAMF,EAAK,UAAUO,CAAU,CAAC,EAC1C,MAAOH,GAAU,CACd,MAAM,IAAI,MAAM,6BAA6BA,EAAM,OAAO,EAAE,CAChE,CAAC,EAGLL,EAAK,UAAU,SAAUC,EAAK,UAAUO,CAAU,CAAC,CAEvD,OAASH,EAAO,CACRA,aAAiB,MACjBL,EAAK,UAAUK,EAAM,OAAO,EAE5BL,EAAK,UAAU,eAAe,CAEtC","names":["core","toml","fs","path","file","error","key","value","parsedToml","keys","currentObject","i"]}